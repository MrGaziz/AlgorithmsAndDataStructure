//package com.company;
//
//import java.util.concurrent.ArrayBlockingQueue;
//import java.util.concurrent.BlockingQueue;
//import java.util.concurrent.ThreadLocalRandom;
//
//public class ProducerConsumer {
//
//    public static void main(String[] args) {
//        // Cоздать blocking queue чтобы хранить числа сгененрированные продюсерами
//        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);
//
//        // Create and start the first producer
//        Producer producer1 = new Producer(queue, 3, 3);
//        Thread producerThread1 = new Thread(producer1);
//        producerThread1.start();
//
//        // Create and start the second producer
//        Producer producer2 = new Producer(queue, 5, 5);
//        Thread producerThread2 = new Thread(producer2);
//        producerThread2.start();
//
//        // Create and start the printer
//        Printer printer = new Printer(queue);
//        Thread printerThread = new Thread(printer);
//        printerThread.start();
//    }
//}
//
//class Producer implements Runnable {
//
//    private BlockingQueue<Integer> queue;
//    private int start;
//    private int interval;
//
//    public Producer(BlockingQueue<Integer> queue, int start, int interval) {
//        this.queue = queue;
//        this.start = start;
//        this.interval = interval;
//    }
//
//    @Override
//    public void run() {
//        int next = start;
//        while (true) {
//            try {
//                // Generate a random sleep interval
//                Thread.sleep(ThreadLocalRandom.current().nextInt(1000, 5000));
//                // Add the next number in the sequence to the queue
//                queue.put(next);
//                next += interval;
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//        }
//    }
//}
//
//class Printer implements Runnable {
//
//    private BlockingQueue<Integer> queue;
//
//    public Printer(BlockingQueue<Integer> queue) {
//        this.queue = queue;
//    }
//
//    @Override
//    public void run() {
//        while (true) {
//            try {
//                // Generate a random sleep interval
//                Thread.sleep(ThreadLocalRandom.current().nextInt(1000, 5000));
//                // Print the next number in the queue
//                if (!queue.isEmpty()) {
//                    System.out.println(queue.take());
//                }
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//        }
//    }
//}
//
////The above code defines 3 classes: Main, Producer, and Printer.
////In the Main class, we create two instances of the Producer class and one instance of the Printer class. We also create a blocking queue to store the numbers generated by the producers.
////In the Producer class, we have a run() method that generates a random sleep interval and adds the next number in the arithmetic progression to the queue.
////In the Printer class, we have a run()